//BFS(使用queue,先把root放进去，然后逐个把root所在层的下层的节点放进去。弹出root，存root.val)   
public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>>list=new LinkedList<>();
        Queue<TreeNode>queue=new LinkedList<>();
        if(root==null)
            return list;
        queue.offer(root);
        while(!queue.isEmpty()){
            List<Integer>tmpList=new LinkedList<>();
            int size=queue.size();
            for(int i=0;i<size;i++){
                if(queue.peek().left!=null)queue.offer(queue.peek().left);
                if(queue.peek().right!=null)queue.offer(queue.peek().right);
                tmpList.add(queue.poll().val);
            }
            list.add(0,tmpList);  //a little tricky !!每次加在头部，相当于把后层的放在前面。
        }
        return list;
    }


//DFS(还没搞明白！！！！)
 public List<List<Integer>> levelOrderBottom(TreeNode root) {
	LinkedList<List<Integer>> list = new LinkedList<List<Integer>>();
	addLevel(list, 0, root);
	return list;
}

private void addLevel(LinkedList<List<Integer>> list, int level, TreeNode node) {
	if (node == null) return;
	if (list.size()-1 < level) list.add(0,new LinkedList<Integer>());
	list.get(list.size()-1-level).add(node.val);//此处为何不能直接写成get(0)?
	addLevel(list, level+1, node.left);
	addLevel(list, level+1, node.right);
}
