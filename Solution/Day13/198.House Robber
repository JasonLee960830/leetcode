

Solution: 

存储到达每个房子时选择偷dp[i][1]和不偷dp[i][0]两种情况下的钱
public int rob(int[] num) {
    int[][] dp = new int[num.length + 1][2];
    for (int i = 1; i <= num.length; i++) {
        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);   //不下手
        dp[i][1] = num[i - 1] + dp[i - 1][0];  //下手！
    }
    return Math.max(dp[num.length][0], dp[num.length][1]);
    
    空间复杂度优化！
    
    public int rob(int[] num) {
    int prevNo = 0;
    int prevYes = 0;
    for (int n : num) {
        int temp = prevNo;
        prevNo = Math.max(prevNo, prevYes);
        prevYes = n + temp;
    }
    return Math.max(prevNo, prevYes);
}
