Description:给一个各元素都不相等的数组，返回数组的所有排列情形。


Solution:采用回溯法

回溯法是一个通用的算法，能够找到一些计算问题的所有解， 通常是一些满足约束问题。 通过遍历的方法寻找解，不断深入搜索，如果确定这部分不可能有解，则放弃这部份的搜索， 继续下一部分的搜索


其程序在实现上满足下列特征：

（1）每一步的处理，先check特殊情况，即return case；这里必须有returncase。

（2）再使用一个for循环，尝试每一种选择，在for循环内，先检测该种选择是否正确，然后如果正确，就在轨迹上记录，然后递归地处理下一步，处理完以后，再把轨迹恢复，供下一中选择进行。这里恢复轨迹是很重要的。

可以分为两类，一种是寻找全部的解，一种是找到一个解。

一个解:递归函数需要返回值，在for循环里面尝试每一种可能时，如果该选择返回true，那么就返回。否则for结束的时候（执行到这里说明所有尝试都失败了）要返回false。利用返回值可以让程序提前返回，只找到一个解。

多个解：这时递归函数可以是void类型，这样就可以搜全部的解，for循环结束也不需要处理。

对于这道题目来说，首先第一步处理， 如果List<Integer>tempList的长度达到了数组的长度，则可以把这个结果添加入List<List<Integer>>list中
否则执行for循环：，判断选择正确的方法就是看当前的tempList内是否有预添加的元素，如果有，则跳过，无的话，则tempList.add(),接下来递归下一步处理，恢复的处理用tempList.remove(tempList.size()-1)（）供下一次for循环重新尝试选择

 public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>>list=new ArrayList<>();
        backtrack(list,new ArrayList<>(),nums);
        return list;
    }
    private void backtrack(List<List<Integer>>list,List<Integer>tempList,int[]nums){
        if(tempList.size()==nums.length)
            list.add(new ArrayList(tempList));//尤其小心这里不能直接引用tempList
        else{
            for(int i=0;i<nums.length;i++){
                if(tempList.contains(nums[i])) continue;
                tempList.add(nums[i]);
                backtrack(list,tempList,nums);
                tempList.remove(tempList.size()-1);//完成回溯的重要步骤，清除轨迹，删除当前templist的最后一个值
            }
        }
    }

不能引用tempList去add的原因是tempList is a list that is used throughout all the recursive calls to keep track of the current recursion path. When we finally reach the base case, we cannot add this same list to the list of lists. This is because when you add tempList, you are adding a reference to tempList. This means that other recursive paths can modify the path you just inserted into the final list of lists.
