
Description:
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


Solution:  只需要把当前root的左右子树的depth算出来，如果差值大于1了，返回false;否则向left 和right 继续递归下去。

            计算深度使用递归比较方便，返回1+该root的两个子树的最大深度。
 public boolean isBalanced(TreeNode root) {
    
        while(root!=null){
            if(Math.abs(cal(root.left)-cal(root.right))>1)
                return false;
            return  isBalanced(root.left)&&isBalanced(root.right);
        }
        return true;
    }
    public int cal(TreeNode root){
        if(root==null){
            return 0;
        }
        return Math.max(cal(root.left),cal(root.right))+1;
    }
