Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.



Solution:   想象递归时最终要返回一个值的时候应该在树的什么位置呢？应该时在树的最底端的叶子处返回一个对应路径的值，这个路径对应的值应该等于之前传过来的参数数值*10再加上现在这个值，而什么时候才执行这部操作呢？即通过n.left和n.right都为空时确定这是一个底端叶子。当未达到底端叶子节点时该返回什么呢？返回sum(n.left,s*1o+n.val)+sum(n.right,s*10+n.val);但是可能存在其中一个孩子为空，这时应在这个返回代码之前，加上if(n==null) return 0;即不用加上为空的那一边的值。

public int sumNumbers(TreeNode root) {
	return sum(root, 0);
}

public int sum(TreeNode n, int s){
    if(n==null)
        return 0;
    if(n.left==null&&n.right==null)
        return s*10+n.val;
    return sum(n.left,s*10+n.val)+sum(n.right,s*10+n.val);
}
