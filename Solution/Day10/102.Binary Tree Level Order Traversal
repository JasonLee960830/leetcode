Description:按照层级的顺序将二叉树的值存在List<List<Integer>>中。

Solution:广度遍历BFS

Review: 广度遍历要使用到的数据结构是queue  常用操作queue的方法有： offer poll peek

offer: 添加一个元素并且返回true,如果队列满了就返回false.
peek:  返回队列头部元素，如为空则返回null.
poll:删除并返回头部元素，如队列为空则返回null.

这道题的主要思路是： 先把root放进queue,然后记下此时在队列中有多少元素，把队列中的每个元素弹出并把左右孩子加入队列,将所有弹出的元素的值用一个链表存储起来，每次大循环结束后将该链表加入最终的结果中。然后判断队列是否为空，不为空则继续上述步骤。

public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
        
        if(root == null) return wrapList;
        
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelNum = queue.size();
            List<Integer> subList = new LinkedList<Integer>();
            for(int i=0; i<levelNum; i++) {
                if(queue.peek().left != null) queue.offer(queue.peek().left);
                if(queue.peek().right != null) queue.offer(queue.peek().right);
                subList.add(queue.poll().val);
            }
            wrapList.add(subList);
        }
        return wrapList;
    }
    
    
    Note: LinkedList可以用来实例化Queue，ArrayList不可以！！！
